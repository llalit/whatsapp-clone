{"version":3,"sources":["firebase.js","SidebarChat.js","StateProvider.js","Sidebar.js","Chat.js","reducer.js","Login.js","App.js","serviceWorker.js","index.js"],"names":["db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","provider","auth","GoogleAuthProvider","SidebarChat","id","name","addNewChat","useState","seed","setSeed","messages","setMessages","useEffect","collection","doc","orderBy","onSnapshot","snapshot","docs","map","data","Math","floor","random","onClick","e","roomName","prompt","add","className","to","Avatar","src","message","StateContext","createContext","StateProvider","reducer","initialState","children","Provider","value","useReducer","useStateValue","useContext","Sidebar","rooms","setRooms","useParams","user","unsubscribe","photoURL","IconButton","DonutLarge","Chat","MoreVert","SearchOutlined","placeholder","type","room","key","input","setInput","roomId","setRoomName","Date","length","timestamp","toDate","toUTCString","AttachFile","displayName","InsertEmoticon","onChange","target","preventDefault","console","log","FieldValue","serverTimestamp","Mic","actionTypes","state","action","Login","dispatch","alt","Button","signInWithPopup","then","result","catch","error","alert","App","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ddb1f525.chunk.js","sourcesContent":["import firebase from 'firebase';\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyCeqccc14GlAys8ABMn4mN-pzrS7Yxjrc8\",\r\n  authDomain: \"whatsapp-clone-e540f.firebaseapp.com\",\r\n  databaseURL: \"https://whatsapp-clone-e540f.firebaseio.com\",\r\n  projectId: \"whatsapp-clone-e540f\",\r\n  storageBucket: \"whatsapp-clone-e540f.appspot.com\",\r\n  messagingSenderId: \"631914089082\",\r\n  appId: \"1:631914089082:web:ab7649aaa96fbd86f749c3\",\r\n  measurementId: \"G-38Y7F0NQEL\"\r\n};\r\n\r\n\r\nconst firebaseApp = firebase.initializeApp(firebaseConfig);\r\nconst db = firebaseApp.firestore();\r\nconst auth = firebase.auth()\r\nconst provider = new firebase.auth.GoogleAuthProvider();\r\n\r\nexport { auth, provider};\r\nexport default db;","import { Avatar } from '@material-ui/core';\r\nimport React, {useState,useEffect} from 'react';\r\nimport './sidebarChat.css';\r\nimport db from './firebase';\r\nimport { Link } from 'react-router-dom';\r\n\r\nfunction SidebarChat({id, name, addNewChat}) {\r\n    const [seed, setSeed] = useState('')\r\n    \r\n  const [messages, setMessages]  = useState('');\r\n\r\n    useEffect(()=>{\r\n      if(id){\r\n        db.collection(\"rooms\")\r\n        .doc(id)\r\n        .collection(\"message\")\r\n        .orderBy(\"timestamp\", \"desc\")\r\n        .onSnapshot((snapshot)=>\r\n        setMessages(snapshot.docs.map((doc)=>doc.data()))\r\n        );\r\n      }\r\n  }, [id]);\r\n\r\n\r\n    useEffect(()=>{\r\n       setSeed(Math.floor(Math.random()*5000));\r\n    }, []);\r\n\r\n    const createChat = (e) =>{\r\n      \r\n        const roomName=prompt('Please enter name for chat');\r\n\r\n        if(roomName){\r\n            db.collection('rooms').add({\r\n              name: roomName,\r\n            })\r\n        }\r\n    }\r\n\r\n  return !addNewChat ? (\r\n  <Link  to={`/rooms/${id}`}>\r\n    \r\n    <div className=\"sidebarChat\">\r\n      <Avatar src={`https://avatars.dicebear.com/api/human/${seed}.svg`} />\r\n\r\n      <div className=\"sidebarChat__info\">\r\n          <h2>{name}</h2>\r\n          <p>{messages[0]?.message}</p>\r\n      </div>  \r\n    </div>\r\n  </Link>\r\n  ):(<div onClick={createChat}\r\n  className=\"sidebarChat\">\r\n      <h2>Add new Chat</h2>\r\n  </div>)\r\n}\r\n\r\nexport default SidebarChat;\r\n","import React , {createContext, useContext, useReducer} from 'react';\r\n\r\nexport const StateContext = createContext();\r\n\r\nexport const StateProvider = ({\r\n    reducer, initialState, children\r\n}) =>(\r\n     <StateContext.Provider value={useReducer(reducer, initialState)}>\r\n         {children}\r\n     </StateContext.Provider>\r\n);\r\n\r\nexport const useStateValue=()=>useContext(StateContext);","import { Avatar, Icon, IconButton } from '@material-ui/core';\r\nimport { Chat, DonutLarge, MoreVert, SearchOutlined } from '@material-ui/icons';\r\nimport React, { useState, useEffect } from 'react';\r\nimport './Sidebar.css';\r\nimport SidebarChat from './SidebarChat';\r\nimport db from './firebase';\r\nimport { useParams } from 'react-router';\r\nimport { useStateValue } from './StateProvider';\r\nfunction Sidebar() {\r\n\r\n     const [rooms, setRooms] = useState([]);\r\n     const roomId = useParams();\r\n\r\n     const [{user}, dispatch]=useStateValue();\r\n\r\n     useEffect(()=>{\r\n        const unsubscribe=  db.collection('rooms').onSnapshot((snapshot)=>\r\n               setRooms(\r\n                    snapshot.docs.map(doc=>({\r\n                    id: doc.id,\r\n                    data:doc.data(),\r\n               }))\r\n          )          \r\n     )\r\n          return()=>{\r\n               unsubscribe();\r\n          }\r\n          },[])\r\n  return (\r\n    <div className='sidebar'>\r\n       <div className=\"sidebar__header\">\r\n            <Avatar  src={user?.photoURL}/>\r\n       <div className=\"sidebar__headerRight\">\r\n            <IconButton>\r\n                <DonutLarge />\r\n            </IconButton>\r\n            <IconButton>\r\n               <Chat />\r\n            </IconButton>\r\n            <IconButton>\r\n                <MoreVert />\r\n            </IconButton>\r\n       </div>\r\n       </div>\r\n\r\n       <div className=\"sidebar__search\">\r\n\r\n            <div className=\"sidebar__searchContainer\">\r\n                <SearchOutlined />\r\n                <input placeholder=\"Search or start new chat\" type=\"text\" /> \r\n            </div>\r\n       </div>\r\n       \r\n       <div className=\"sidebar__chats\">\r\n            <SidebarChat  addNewChat/>\r\n            {rooms.map(room=>(\r\n                 <SidebarChat key={room.id} id={room.id} name={room.data.name} />\r\n            ))}\r\n       </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Sidebar;\r\n","import React, { useState, useEffect } from 'react';\r\nimport './Chat.css';\r\nimport { Avatar, IconButton } from '@material-ui/core';\r\nimport { SearchOutlined, AttachFile, MoreVert, InsertEmoticon, Mic, SettingsInputAntenna } from '@material-ui/icons';\r\nimport { useParams } from 'react-router';\r\nimport db from './firebase';\r\nimport { useStateValue } from './StateProvider';\r\nimport firebase from 'firebase';\r\n\r\nfunction Chat() {\r\n\r\n    const [seed, setSeed] = useState('')\r\n    const [input, setInput] = useState('');\r\n    const {roomId} = useParams();\r\n    const [roomName, setRoomName] = useState('');\r\n    const [messages, setMessages] = useState([]); \r\n    const [{user}, dispatch]=useStateValue();\r\n    \r\n    \r\n    useEffect(()=>{\r\n      if(roomId) {\r\n          db.collection('rooms').doc(roomId).onSnapshot((snapshot)=>\r\n            setRoomName(snapshot.data().name)\r\n          );\r\n        \r\n          db.collection('rooms').doc(roomId).collection('message').orderBy('timestamp','asc')\r\n            .onSnapshot((snapshot)=>\r\n            setMessages(snapshot.docs.map((doc)=>doc.data()))     \r\n            )\r\n      }\r\n    }, [roomId])\r\n\r\n    useEffect(()=>{\r\n       setSeed(Math.floor(Math.random()*5000));\r\n    }, [roomId]);\r\n\r\n\r\n    const sendMessage =(e)=>{\r\n        e.preventDefault();\r\n        console.log('you typed input >>>', input);\r\n\r\n        db.collection('rooms').doc(roomId).collection('message').add({\r\n          message:input,\r\n          name:user.displayName,\r\n          timestamp: firebase.firestore.FieldValue.serverTimestamp()\r\n        })\r\n        setInput('');\r\n    }\r\n\r\n  return (\r\n    <div className=\"chat \">\r\n        <div className=\"chat__header\">\r\n         <Avatar src={`https://avatars.dicebear.com/api/human/${seed}.svg`} />\r\n\r\n\r\n        <div className=\"chat__headerInfo\">\r\n        <h3>{roomName}</h3>\r\n        <p>last seen at {new Date(messages[messages.length-1]?.timestamp?.toDate()).toUTCString()}\r\n        </p>\r\n        </div>\r\n\r\n        <div className=\"chat__headerRight\">\r\n          <IconButton>\r\n            <SearchOutlined />\r\n          </IconButton>\r\n\r\n          <IconButton>\r\n            <AttachFile />\r\n          </IconButton>\r\n\r\n          <IconButton>\r\n            <MoreVert />\r\n          </IconButton>\r\n        </div>\r\n        </div>\r\n\r\n          <div className=\"chat__body\">\r\n              {messages.map(message=>(\r\n            \r\n              <p className={`chat__message  ${message.name === user.displayName && \"chat__reciever \"}`}>\r\n              \r\n                  <span className=\"chat__name\">\r\n                    {message.name}\r\n                  </span>\r\n                      {message.message}\r\n\r\n                  <span className=\"chat__timestamp\">\r\n                    {new Date(message.timestamp?.toDate()).toUTCString()}\r\n                  </span>\r\n              </p>\r\n              ))}\r\n          </div>\r\n\r\n        <div className=\"chat__footer\">\r\n            <IconButton>\r\n              <InsertEmoticon />\r\n            </IconButton>  \r\n\r\n            <form>\r\n              <input type=\"text\" onChange={e=>setInput(e.target.value)} placeholder='Send Messaage'\r\n                value={input}\r\n              />\r\n              <button onClick={sendMessage} type=\"submit\">Send message</button>\r\n            </form>\r\n            <IconButton>\r\n              <Mic />\r\n            </IconButton>\r\n        </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Chat;\r\n","\r\nexport const initialState = {\r\n    user:null,\r\n}\r\n\r\nexport const actionTypes={\r\n    SET_USER:'SET_USER',\r\n};\r\n\r\nconst reducer = (state, action)=>{\r\n    console.log(action);\r\n    switch(action.type){\r\n        case actionTypes.SET_USER:\r\n            return{\r\n                ...state,\r\n                user:action.user,\r\n            };\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default reducer;\r\n","import React from 'react';\r\nimport './Login.css';\r\nimport {Button} from '@material-ui/core';\r\nimport { auth } from 'firebase';\r\nimport { provider } from './firebase';\r\nimport firebase from 'firebase';\r\nimport { actionTypes } from './reducer';\r\nimport { useStateValue } from './StateProvider';\r\n\r\n\r\nfunction Login(){\r\n\r\n    const [{user}, dispatch]=useStateValue();\r\n    \r\n    const signIn = () =>{firebase.auth().signInWithPopup(provider).then((result)=>{\r\n        dispatch({\r\n            type:actionTypes.SET_USER,\r\n            user:result.user,\r\n        })\r\n    })\r\n        .catch((error)=>alert(error.message));\r\n    }   \r\n    return(\r\n        <div className=\"login\">\r\n            <div className=\"login__container\">\r\n                <img src=\"https://upload.wikimedia.org/wikipedia/commons/6/6b/WhatsApp.svg\" alt=\"\"/>\r\n\r\n                <div className=\"login__text\">\r\n                    <h1>Signin in to whatsaap</h1>\r\n                </div>\r\n\r\n                <Button  onClick={signIn}>\r\n                    Sign In with Google\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Login;","\nimport React, { useState } from 'react';\nimport './App.css';\nimport Sidebar from './Sidebar';\nimport Chat from './Chat';\n\nimport { Route, BrowserRouter as Router, Switch, Link } from 'react-router-dom';\nimport Login from './Login';\nimport { useStateValue } from './StateProvider';\nfunction App() {\n\n  \n\n  const [{user} , dispatch] = useStateValue();\n  \n  return (\n\n    //BEM naming convention\n    <div className=\"app\">\n    {!user ? (\n        <Login />\n    ):(\n      \n      <div className=\"app__body\">\n      <Router>\n          <Sidebar />\n        <Switch>\n            <Route exact path=\"/\">\n              <Chat />\n            </Route>\n           \n\n            <Route exact path=\"/rooms/:roomId\">\n                <Chat /> \n            </Route>\n\n        </Switch>\n      </Router>\n      </div>\n    )}\n    </div>\n  ); \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport reducer, {initialState} from './reducer';\nimport { StateProvider } from './StateProvider';\nReactDOM.render(\n  \n  <React.StrictMode>\n  <StateProvider initialState={initialState} reducer={reducer}>\n    <App />\n  </StateProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}